{
  "version": 3,
  "sources": ["../../animated-backgrounds/src/backgroundAnimations.js", "../../animated-backgrounds/src/AnimatedText.js", "../../animated-backgrounds/src/index.js"],
  "sourcesContent": ["/**\r\n * @module backgroundAnimations\r\n * @description Collection of animation functions with blend mode support\r\n */\r\n\r\n/**\r\n * Creates a starry night animation with blend modes\r\n */\r\nexport const starryNight = (canvas, ctx) => {\r\n    const stars = [];\r\n    for (let i = 0; i < 150; i++) {\r\n        stars.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2,\r\n            vx: Math.floor(Math.random() * 50) - 25,\r\n            vy: Math.floor(Math.random() * 50) - 25,\r\n            twinkle: Math.random(),\r\n            color: `hsla(${Math.random() * 360}, 70%, 70%, 0.8)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        stars.forEach(star => {\r\n            star.twinkle += 0.02;\r\n            const opacity = Math.abs(Math.sin(star.twinkle));\r\n            \r\n            // Create glow effect\r\n            const gradient = ctx.createRadialGradient(\r\n                star.x, star.y, 0,\r\n                star.x, star.y, star.radius * 4\r\n            );\r\n            gradient.addColorStop(0, star.color);\r\n            gradient.addColorStop(1, 'transparent');\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius * 4, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            \r\n            // Draw star core\r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\r\n            ctx.fill();\r\n\r\n            star.x += star.vx / 60;\r\n            star.y += star.vy / 60;\r\n\r\n            if (star.x < 0 || star.x > canvas.width) star.vx = -star.vx;\r\n            if (star.y < 0 || star.y > canvas.height) star.vy = -star.vy;\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates floating bubbles animation with blend modes\r\n */\r\nexport const floatingBubbles = (canvas, ctx) => {\r\n    const bubbles = [];\r\n    for (let i = 0; i < 75; i++) {\r\n        bubbles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 30 + 5,\r\n            speed: Math.random() * 0.7 + 0.1,\r\n            color: `hsla(${Math.random() * 360}, 70%, 60%, 0.6)`,\r\n            glowColor: `hsla(${Math.random() * 360}, 70%, 60%, 0.3)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(30, 41, 59, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        bubbles.forEach(bubble => {\r\n            // Create glow effect\r\n            const gradient = ctx.createRadialGradient(\r\n                bubble.x, bubble.y, 0,\r\n                bubble.x, bubble.y, bubble.radius * 2\r\n            );\r\n            gradient.addColorStop(0, bubble.glowColor);\r\n            gradient.addColorStop(1, 'transparent');\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius * 2, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            \r\n            // Draw bubble\r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = bubble.color;\r\n            ctx.fill();\r\n            \r\n            // Add highlight\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                bubble.x - bubble.radius * 0.3,\r\n                bubble.y - bubble.radius * 0.3,\r\n                bubble.radius * 0.2,\r\n                0,\r\n                Math.PI * 2\r\n            );\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\r\n            ctx.fill();\r\n\r\n            bubble.y -= bubble.speed;\r\n            bubble.x += Math.sin(bubble.y * 0.03) * 0.5;\r\n            \r\n            if (bubble.y + bubble.radius < 0) {\r\n                bubble.y = canvas.height + bubble.radius;\r\n                bubble.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry gradientWave animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const gradientWave = (canvas, ctx) => {\r\n    let time = 0;\r\n\r\n    return () => {\r\n        time += 0.01;\r\n\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `hsl(${time * 10 % 360}, 70%, 50%)`);\r\n        gradient.addColorStop(1, `hsl(${(time * 10 + 180) % 360}, 70%, 50%)`);\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height * 0.15 * i + Math.sin(time + i) * 30);\r\n            for (let x = 0; x < canvas.width; x += 10) {\r\n                ctx.lineTo(x, canvas.height * 0.15 * i + Math.sin(time + i + x * 0.01) * 30);\r\n            }\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 - i * 0.01})`;\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n/**\r\n * Creates a starry particleNetwork animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const particleNetwork = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 150;\r\n    const maxDistance = 120;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 3 + 1,\r\n            vx: Math.random() * 1.5 - 0.75,\r\n            vy: Math.random() * 1.5 - 0.75,\r\n            color: `hsl(${Math.random() * 360}, 70%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        for (let i = 0; i < particles.length; i++) {\r\n            for (let j = i + 1; j < particles.length; j++) {\r\n                const dx = particles[i].x - particles[j].x;\r\n                const dy = particles[i].y - particles[j].y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < maxDistance) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particles[i].x, particles[i].y);\r\n                    ctx.lineTo(particles[j].x, particles[j].y);\r\n                    ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * Creates a starry galaxySpiral animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const galaxySpiral = (canvas, ctx, speed = 0.0001) => {\r\n    const stars = initializeStars(canvas, 2000);\r\n    let rotation = 0;\r\n\r\n    function initializeStars(canvas, starCount) {\r\n        const stars = [];\r\n        for (let i = 0; i < starCount; i++) {\r\n            const distance = Math.random() * canvas.width * 0.4;\r\n            const angle = Math.random() * Math.PI * 2;\r\n            stars.push({\r\n                x: Math.cos(angle) * distance,\r\n                y: Math.sin(angle) * distance,\r\n                radius: Math.random() * 1.5 + 0.5,\r\n                color: `hsl(${Math.random() * 60 + 200}, 80%, 70%)`,\r\n                angle: angle,\r\n                distance: distance\r\n            });\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    function drawStars(ctx, stars, rotation, speed) {\r\n        stars.forEach(star => {\r\n            const x = Math.cos(star.angle) * star.distance;\r\n            const y = Math.sin(star.angle) * star.distance;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = star.color;\r\n            ctx.fill();\r\n\r\n            // Adjust the angle increment here to control the speed of star rotation\r\n            star.angle += speed / (star.distance * 0.00008);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(10, 10, 30, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(rotation);\r\n\r\n        drawStars(ctx, stars, rotation, speed);\r\n\r\n        ctx.restore();\r\n        // Adjust the rotation increment here to control the speed of galaxy rotation\r\n        rotation += speed;\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry rainbowWaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const rainbowWaves = (canvas, ctx) => {\r\n    let time = 0;\r\n    const waves = 7;\r\n    const colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF'];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.02;\r\n\r\n        for (let i = 0; i < waves; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height / 2);\r\n\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i * 0.5) * 50 +\r\n                    Math.cos(x * 0.02 + time * 0.7 + i * 0.3) * 25 +\r\n                    canvas.height / 2;\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.strokeStyle = colors[i % colors.length];\r\n            ctx.lineWidth = 4;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry auroraBorealis animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const auroraBorealis = (canvas, ctx) => {\r\n    let time = 0;\r\n    const colorStops = [\r\n        { pos: 0, color: 'rgba(0, 255, 128, 0.5)' },\r\n        { pos: 0.5, color: 'rgba(0, 128, 255, 0.5)' },\r\n        { pos: 1, color: 'rgba(128, 0, 255, 0.5)' }\r\n    ];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.005;\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n            colorStops.forEach(stop => {\r\n                gradient.addColorStop(stop.pos, stop.color);\r\n            });\r\n\r\n            ctx.beginPath();\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i) * 50 +\r\n                    Math.sin(x * 0.02 - time * 1.5 + i) * 30 +\r\n                    canvas.height * (0.4 + i * 0.2);\r\n                ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            ctx.lineTo(0, canvas.height);\r\n            ctx.closePath();\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry neonPulse animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const neonPulse = (canvas, ctx) => {\r\n    const circles = [];\r\n    const colors = ['#FF00FF', '#00FFFF', '#FFFF00', '#FF00AA'];\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        circles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            color: colors[Math.floor(Math.random() * colors.length)],\r\n            phase: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        circles.forEach(circle => {\r\n            const glow = Math.sin(circle.phase) * 20 + 30;\r\n            const gradient = ctx.createRadialGradient(\r\n                circle.x, circle.y, 0,\r\n                circle.x, circle.y, circle.radius\r\n            );\r\n            gradient.addColorStop(0, circle.color);\r\n            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(circle.x, circle.y, circle.radius + glow, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            circle.phase += 0.05;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry cosmicDust animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const cosmicDust = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 300;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 2 + 0.5,\r\n            speedX: (Math.random() - 0.5) * 0.5,\r\n            speedY: (Math.random() - 0.5) * 0.5,\r\n            color: `hsl(${Math.random() * 60 + 180}, 100%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry electricStorm animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const electricStorm = (canvas, ctx) => {\r\n    let time = 0;\r\n    const bolts = [];\r\n\r\n    function createBolt() {\r\n        const startX = Math.random() * canvas.width;\r\n        let x = startX;\r\n        let y = 0;\r\n        const points = [{ x, y }];\r\n\r\n        while (y < canvas.height) {\r\n            x += (Math.random() - 0.5) * 50;\r\n            y += Math.random() * 20 + 10;\r\n            points.push({ x, y });\r\n        }\r\n\r\n        return {\r\n            points,\r\n            life: 5 + Math.random() * 5,\r\n            width: Math.random() * 3 + 1\r\n        };\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.2)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        time += 0.1;\r\n        if (Math.random() < 0.1) bolts.push(createBolt());\r\n\r\n        bolts.forEach((bolt, index) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(bolt.points[0].x, bolt.points[0].y);\r\n            for (let i = 1; i < bolt.points.length; i++) {\r\n                ctx.lineTo(bolt.points[i].x, bolt.points[i].y);\r\n            }\r\n            ctx.strokeStyle = `rgba(180, 220, 255, ${bolt.life / 10})`;\r\n            ctx.lineWidth = bolt.width;\r\n            ctx.stroke();\r\n\r\n            bolt.life -= 0.2;\r\n            if (bolt.life <= 0) bolts.splice(index, 1);\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry quantumField animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const quantumField = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 100;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 4 + 1,\r\n            speedX: (Math.random() - 0.5) * 2,\r\n            speedY: (Math.random() - 0.5) * 2,\r\n            hue: Math.random() * 360\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsla(${particle.hue}, 100%, 50%, 0.8)`;\r\n            ctx.fill();\r\n\r\n            particles.forEach(otherParticle => {\r\n                const dx = particle.x - otherParticle.x;\r\n                const dy = particle.y - otherParticle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < 100) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particle.x, particle.y);\r\n                    ctx.lineTo(otherParticle.x, otherParticle.y);\r\n                    ctx.strokeStyle = `hsla(${(particle.hue + otherParticle.hue) / 2}, 100%, 50%, ${1 - distance / 100})`;\r\n                    ctx.stroke();\r\n                }\r\n            });\r\n\r\n            particle.hue = (particle.hue + 0.5) % 360;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry geometricShapes animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const geometricShapes = (canvas, ctx) => {\r\n    const shapes = [];\r\n    const shapeCount = 50;\r\n\r\n    for (let i = 0; i < shapeCount; i++) {\r\n        shapes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 30 + 10,\r\n            type: Math.floor(Math.random() * 3),\r\n            rotation: Math.random() * Math.PI * 2,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            color: `hsl(${Math.random() * 360}, 70%, 50%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        shapes.forEach(shape => {\r\n            ctx.save();\r\n            ctx.translate(shape.x, shape.y);\r\n            ctx.rotate(shape.rotation);\r\n            ctx.fillStyle = shape.color;\r\n\r\n            switch (shape.type) {\r\n                case 0: // Square\r\n                    ctx.fillRect(-shape.size / 2, -shape.size / 2, shape.size, shape.size);\r\n                    break;\r\n                case 1: // Circle\r\n                    ctx.beginPath();\r\n                    ctx.arc(0, 0, shape.size / 2, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                    break;\r\n                case 2: // Triangle\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, -shape.size / 2);\r\n                    ctx.lineTo(shape.size / 2, shape.size / 2);\r\n                    ctx.lineTo(-shape.size / 2, shape.size / 2);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    break;\r\n            }\r\n\r\n            ctx.restore();\r\n\r\n            shape.rotation += shape.speed * 0.05;\r\n            shape.y += shape.speed;\r\n            if (shape.y > canvas.height + shape.size) {\r\n                shape.y = -shape.size;\r\n                shape.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry fireflies animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fireflies = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 3 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            brightness: Math.random(),\r\n            angle: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        fireflies.forEach(firefly => {\r\n            firefly.brightness += Math.random() * 0.1 - 0.05;\r\n            firefly.brightness = Math.max(0, Math.min(1, firefly.brightness));\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.brightness})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.cos(firefly.angle) * firefly.speed;\r\n            firefly.y += Math.sin(firefly.angle) * firefly.speed;\r\n\r\n            if (firefly.x < 0 || firefly.x > canvas.width || firefly.y < 0 || firefly.y > canvas.height) {\r\n                firefly.angle += Math.PI;\r\n            }\r\n\r\n            if (Math.random() < 0.01) {\r\n                firefly.angle = Math.random() * Math.PI * 2;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry matrixRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const matrixRain = (canvas, ctx) => {\r\n    const columns = Math.floor(canvas.width / 20);\r\n    const drops = [];\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        drops[i] = Math.random() * canvas.height;\r\n    }\r\n\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+[]{}|;:,.<>?';\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.fillStyle = '#0F0';\r\n        ctx.font = '15px monospace';\r\n\r\n        for (let i = 0; i < drops.length; i++) {\r\n            const text = characters[Math.floor(Math.random() * characters.length)];\r\n            ctx.fillText(text, i * 20, drops[i] * 20);\r\n\r\n            if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {\r\n                drops[i] = 0;\r\n            }\r\n            drops[i] += 0.6;\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry dnaHelix animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const dnaHelix = (canvas, ctx) => {\r\n    const speed = 0.02\r\n    const baseRadius = 100\r\n    const amplitude = 50\r\n    const nucleotideSize = 5\r\n    let t = 0;\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            ctx.beginPath();\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 10) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.lineTo(x, r);\r\n            }\r\n            ctx.strokeStyle = i === 0 ? 'rgba(255, 0, 0, 0.5)' : 'rgba(0, 0, 255, 0.5)';\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n\r\n            // Draw nucleotides\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 40) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.fillStyle = i === 0 ? 'rgba(255, 255, 0, 0.8)' : 'rgba(0, 255, 0, 0.8)';\r\n                ctx.beginPath();\r\n                ctx.arc(x, r, nucleotideSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n        t += speed;\r\n    };\r\n}\r\n/**\r\n * Creates a starry neuralNetwork animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const neuralNetwork = (canvas, ctx) => {\r\n    const nodeCount = 30;\r\n    const connectionProbability = 0.2;\r\n    const speed = 0.3;\r\n    const nodes = [];\r\n    const connections = [];\r\n\r\n    // Create background gradient\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#000000');\r\n    backgroundGradient.addColorStop(1, '#1a1a2e');\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n        nodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * speed,\r\n            vy: (Math.random() - 0.5) * speed,\r\n            size: Math.random() * 2 + 2\r\n        });\r\n    }\r\n\r\n    // Pre-compute connections\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        for (let j = i + 1; j < nodes.length; j++) {\r\n            if (Math.random() < connectionProbability) {\r\n                connections.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        // Draw background\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Update and draw nodes\r\n        nodes.forEach((node, index) => {\r\n            node.x += node.vx;\r\n            node.y += node.vy;\r\n\r\n            if (node.x < 0 || node.x > canvas.width) node.vx *= -1;\r\n            if (node.y < 0 || node.y > canvas.height) node.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsl(${index * (360 / nodeCount)}, 100%, 50%)`;\r\n            ctx.fill();\r\n\r\n            // Add glow effect\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size + 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(node.x, node.y, node.size, node.x, node.y, node.size + 3);\r\n            gradient.addColorStop(0, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0.8)`);\r\n            gradient.addColorStop(1, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0)`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw connections\r\n        connections.forEach(([i, j]) => {\r\n            const dx = nodes[i].x - nodes[j].x;\r\n            const dy = nodes[i].y - nodes[j].y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const opacity = 1 - distance / Math.max(canvas.width, canvas.height);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(nodes[i].x, nodes[i].y);\r\n            ctx.lineTo(nodes[j].x, nodes[j].y);\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.2})`;\r\n            ctx.stroke();\r\n        });\r\n\r\n        // Add subtle particle effect\r\n        for (let i = 0; i < 5; i++) {\r\n            ctx.beginPath();\r\n            ctx.arc(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 1.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n            ctx.fill();\r\n        }\r\n    };\r\n}\r\n/**\r\n * Creates a starry oceanWaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const oceanWaves = (canvas, ctx) => {\r\n    const waveCount = 7;\r\n    const amplitude = 30;\r\n    const frequency = 0.02;\r\n    const speed = 0.03;\r\n    let time = 0;\r\n\r\n    // Create sky gradient\r\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.6);\r\n    skyGradient.addColorStop(0, '#87CEEB');\r\n    skyGradient.addColorStop(1, '#E0F6FF');\r\n\r\n    // Create sun\r\n    const sun = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 40,\r\n        glow: 20\r\n    };\r\n\r\n    // Create clouds\r\n    const clouds = [\r\n        { x: canvas.width * 0.1, y: canvas.height * 0.15, radius: 30 },\r\n        { x: canvas.width * 0.3, y: canvas.height * 0.1, radius: 40 },\r\n        { x: canvas.width * 0.6, y: canvas.height * 0.2, radius: 35 }\r\n    ];\r\n\r\n    return () => {\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height * 0.6);\r\n\r\n        // Draw sun\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(sun.x, sun.y, sun.radius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(sun.x, sun.y, sun.radius - sun.glow, sun.x, sun.y, sun.radius + sun.glow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 0, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw clouds\r\n        clouds.forEach(cloud => {\r\n            ctx.beginPath();\r\n            ctx.arc(cloud.x, cloud.y, cloud.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw ocean\r\n        for (let i = 0; i < waveCount; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height);\r\n\r\n            for (let x = 0; x <= canvas.width; x += 5) {\r\n                const y = Math.sin(x * frequency + time + i * 0.5) * amplitude * (1 + i * 0.1) +\r\n                    (canvas.height - (i + 1) * (canvas.height * 0.4 / waveCount));\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n            gradient.addColorStop(0, `rgba(0, 100, 255, ${0.1 + (i / waveCount) * 0.15})`);\r\n            gradient.addColorStop(1, `rgba(0, 50, 200, ${0.1 + (i / waveCount) * 0.15})`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n\r\n        time += speed;\r\n    };\r\n}\r\n/**\r\n * Creates a starry snowFall animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const snowFall = (canvas, ctx) => {\r\n    const snowflakeCount = 200;\r\n    const snowflakes = [];\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#0c1445');\r\n    backgroundGradient.addColorStop(1, '#1c2754');\r\n\r\n    // Create moon\r\n    const moon = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 50,\r\n        glow: 20\r\n    };\r\n\r\n    // Create mountains\r\n    const mountains = [\r\n        { points: [[0, canvas.height], [canvas.width * 0.3, canvas.height * 0.7], [canvas.width * 0.5, canvas.height]], color: '#0a1128' },\r\n        { points: [[canvas.width * 0.4, canvas.height], [canvas.width * 0.7, canvas.height * 0.75], [canvas.width, canvas.height]], color: '#0d1636' }\r\n    ];\r\n\r\n    for (let i = 0; i < snowflakeCount; i++) {\r\n        snowflakes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * 1.5,\r\n            vy: Math.random() * 1 + 0.5,\r\n            size: Math.random() * 3 + 1,\r\n            opacity: Math.random() * 0.5 + 0.5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw moon\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(moon.x, moon.y, moon.radius, 0, Math.PI * 2);\r\n        const moonGradient = ctx.createRadialGradient(moon.x, moon.y, moon.radius - moon.glow, moon.x, moon.y, moon.radius + moon.glow);\r\n        moonGradient.addColorStop(0, 'rgba(255, 255, 230, 1)');\r\n        moonGradient.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\r\n        moonGradient.addColorStop(1, 'rgba(255, 255, 230, 0)');\r\n        ctx.fillStyle = moonGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw mountains\r\n        mountains.forEach(mountain => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(mountain.points[0][0], mountain.points[0][1]);\r\n            mountain.points.forEach(point => ctx.lineTo(point[0], point[1]));\r\n            ctx.fillStyle = mountain.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        snowflakes.forEach(flake => {\r\n            flake.x += flake.vx + Math.sin(flake.y * 0.01) * 0.3;\r\n            flake.y += flake.vy;\r\n\r\n            if (flake.y > canvas.height) {\r\n                flake.x = Math.random() * canvas.width;\r\n                flake.y = -flake.size;\r\n                flake.vx = (Math.random() - 0.5) * 1.5;\r\n                flake.vy = Math.random() * 1 + 0.5;\r\n            }\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${flake.opacity})`;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Add a subtle glow effect\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.03)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a starry fireflyForest animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fireflyForest = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n    const trees = [];\r\n    const treeCount = 5;\r\n\r\n    // Create trees\r\n    for (let i = 0; i < treeCount; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            height: Math.random() * 200 + 300,\r\n            width: Math.random() * 100 + 50\r\n        });\r\n    }\r\n\r\n    // Create fireflies\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.01,\r\n            glowIntensity: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Night sky\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, tree.y);\r\n            ctx.lineTo(tree.x - tree.width / 2, tree.y - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, tree.y - tree.height);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 50, 0, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Update and draw fireflies\r\n        fireflies.forEach(fly => {\r\n            fly.x += Math.cos(fly.angle) * fly.speed;\r\n            fly.y += Math.sin(fly.angle) * fly.speed;\r\n            fly.angle += fly.angleSpeed;\r\n\r\n            if (fly.x < 0 || fly.x > canvas.width) fly.angle = Math.PI - fly.angle;\r\n            if (fly.y < 0 || fly.y > canvas.height) fly.angle = -fly.angle;\r\n\r\n            fly.glowIntensity = Math.sin(Date.now() * 0.002 + fly.x * 0.1) * 0.5 + 0.5;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${fly.glowIntensity})`;\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius * 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(fly.x, fly.y, 0, fly.x, fly.y, fly.radius * 3);\r\n            gradient.addColorStop(0, `rgba(255, 255, 100, ${fly.glowIntensity * 0.5})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 100, 0)');\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry realisticClouds animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const realisticClouds = (canvas, ctx) => {\r\n    const clouds = [];\r\n    const cloudCount = 10;\r\n    let gradientHeight;\r\n\r\n    function createCloud(x, y) {\r\n        const particleCount = Math.floor(Math.random() * 50) + 50;\r\n        const particles = [];\r\n\r\n        for (let i = 0; i < particleCount; i++) {\r\n            particles.push({\r\n                x: x + Math.random() * 200 - 100,\r\n                y: y + Math.random() * 100 - 50,\r\n                radius: Math.random() * 30 + 10\r\n            });\r\n        }\r\n\r\n        return {\r\n            particles,\r\n            x,\r\n            y,\r\n            speed: Math.random() * 0.5 + 0.1\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < cloudCount; i++) {\r\n        clouds.push(createCloud(Math.random() * canvas.width, Math.random() * (canvas.height / 2)));\r\n    }\r\n\r\n    // Create gradient for the sky\r\n    const createSkyGradient = () => {\r\n        gradientHeight = canvas.height;\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, gradientHeight);\r\n        gradient.addColorStop(0, '#1e90ff');  // Dodger Blue\r\n        gradient.addColorStop(0.5, '#87ceeb'); // Sky Blue\r\n        gradient.addColorStop(1, '#e6f3ff');  // Very Light Blue\r\n        return gradient;\r\n    }\r\n\r\n    let skyGradient = createSkyGradient();\r\n\r\n    return () => {\r\n        // Redraw sky gradient if canvas size has changed\r\n        if (gradientHeight !== canvas.height) {\r\n            skyGradient = createSkyGradient();\r\n        }\r\n\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        clouds.forEach(cloud => {\r\n            cloud.x += cloud.speed;\r\n            if (cloud.x > canvas.width + 200) {\r\n                cloud.x = -200;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(cloud.x, cloud.y);\r\n\r\n            // Draw cloud shadow\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x + 5, particle.y + 5, particle.radius, 0, Math.PI * 2);\r\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n                ctx.fill();\r\n            });\r\n\r\n            // Draw cloud\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n                const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.radius);\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\r\n                ctx.fillStyle = gradient;\r\n                ctx.fill();\r\n            });\r\n\r\n            ctx.restore();\r\n        });\r\n\r\n        // Optional: Add sun\r\n        const sunRadius = 40;\r\n        const sunGlow = 20;\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width - 100, 100, sunRadius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(canvas.width - 100, 100, 0, canvas.width - 100, 100, sunRadius + sunGlow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 200, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n    };\r\n};\r\n/**\r\n * Creates a starry autumnLeaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const autumnLeaves = (canvas, ctx) => {\r\n    const leaves = [];\r\n    const leafCount = 100;\r\n    const leafColors = ['#ff6b6b', '#feca57', '#ff9ff3', '#ff9f43', '#e17055'];\r\n    const leafImages = [\r\n        '1.jpg',\r\n        '2.jpg',\r\n    ];\r\n    const leafImagesLoaded = [];\r\n    let imagesLoaded = false;\r\n\r\n    // Load images\r\n    const loadImages = () => {\r\n        let loadedCount = 0;\r\n        leafImages.forEach((src, index) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                leafImagesLoaded[index] = img;\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.src = src;\r\n        });\r\n    };\r\n\r\n    loadImages();\r\n\r\n    for (let i = 0; i < leafCount; i++) {\r\n        leaves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 20 + 10,\r\n            speed: Math.random() * 2 + 1,\r\n            amplitude: Math.random() * 20 + 10,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.05,\r\n            imageIndex: Math.floor(Math.random() * leafImages.length),\r\n            color: leafColors[Math.floor(Math.random() * leafColors.length)]\r\n        });\r\n    }\r\n\r\n    const drawLeaf = (leaf) => {\r\n        ctx.save();\r\n        ctx.translate(leaf.x, leaf.y);\r\n        ctx.rotate(leaf.angle);\r\n\r\n        if (imagesLoaded && leafImagesLoaded[leaf.imageIndex]) {\r\n            ctx.drawImage(leafImagesLoaded[leaf.imageIndex], -leaf.size / 2, -leaf.size / 2, leaf.size, leaf.size);\r\n        } else {\r\n            // Fallback: draw a colored oval if image is not available\r\n            ctx.beginPath();\r\n            ctx.ellipse(0, 0, leaf.size / 2, leaf.size / 4, 0, 0, Math.PI * 2);\r\n            ctx.fillStyle = leaf.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(135, 206, 235, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        leaves.forEach(leaf => {\r\n            leaf.y += leaf.speed;\r\n            leaf.x += Math.sin(leaf.y * 0.01) * leaf.amplitude * 0.05;\r\n            leaf.angle += leaf.angleSpeed;\r\n\r\n            if (leaf.y > canvas.height) {\r\n                leaf.y = -leaf.size;\r\n                leaf.x = Math.random() * canvas.width;\r\n            }\r\n\r\n            drawLeaf(leaf);\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry realisticRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const realisticRain = (canvas, ctx) => {\r\n    const raindrops = [];\r\n    const dropCount = 1000;\r\n    const splashes = [];\r\n\r\n    for (let i = 0; i < dropCount; i++) {\r\n        raindrops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 10 + 15\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw and update raindrops\r\n        ctx.strokeStyle = 'rgba(174, 194, 224, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        raindrops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = -drop.length;\r\n                splashes.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    radius: Math.random() * 3 + 1,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw and update splashes\r\n        splashes.forEach((splash, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splash.x, splash.y, splash.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(174, 194, 224, ${splash.opacity})`;\r\n            ctx.fill();\r\n\r\n            splash.radius += 0.1;\r\n            splash.opacity -= 0.03;\r\n\r\n            if (splash.opacity <= 0) {\r\n                splashes.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry fallingFoodFiesta animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fallingFoodFiesta = (canvas, ctx) => {\r\n    const foodItems = [];\r\n    const foodTypes = ['🍔', '🍕', '🌭', '🍟', '🌮', '🍣', '🍩', '🍦', '🍎', '🍇', '🍓', '🍑', '🍍', '🥑', '🥕', '🥪', '🥨', '🧀', '🥐', '🥯', '🍱', '🍜', '🍙', '🍗', '🥟', '🥘', '🍤', '🥞', '🧇', '🥓'];\r\n    const numItems = 50;\r\n\r\n    // Lighter gradient colors\r\n    const colors = [\r\n        { r: 255, g: 102, b: 102 },  // Light Red\r\n        { r: 255, g: 178, b: 102 },  // Light Orange\r\n        { r: 255, g: 255, b: 153 },  // Light Yellow\r\n        { r: 153, g: 255, b: 153 },  // Light Green\r\n        { r: 153, g: 204, b: 255 },  // Light Blue\r\n        { r: 178, g: 102, b: 255 },  // Light Indigo\r\n        { r: 255, g: 153, b: 255 }   // Light Violet\r\n    ];\r\n\r\n    let colorIndex = 0;\r\n    let nextColorIndex = 1;\r\n    let colorT = 0;\r\n    const colorSpeed = 0.005;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n        foodItems.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height - canvas.height,\r\n            emoji: foodTypes[Math.floor(Math.random() * foodTypes.length)],\r\n            size: Math.random() * 20 + 30,\r\n            speed: Math.random() * 1.5 + 0.5,\r\n            rotation: Math.random() * Math.PI * 2,\r\n            rotationSpeed: (Math.random() * 2 - 1) * 0.02\r\n        });\r\n    }\r\n\r\n    const lerpColor = (color1, color2, t) => {\r\n        return {\r\n            r: Math.round(color1.r + (color2.r - color1.r) * t),\r\n            g: Math.round(color1.g + (color2.g - color1.g) * t),\r\n            b: Math.round(color1.b + (color2.b - color1.b) * t)\r\n        };\r\n    };\r\n\r\n    return () => {\r\n        // Update gradient colors\r\n        colorT += colorSpeed;\r\n        if (colorT >= 1) {\r\n            colorT = 0;\r\n            colorIndex = nextColorIndex;\r\n            nextColorIndex = (nextColorIndex + 1) % colors.length;\r\n        }\r\n        const currentColor = lerpColor(colors[colorIndex], colors[nextColorIndex], colorT);\r\n\r\n        // Create moving gradient with lighter colors\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `rgb(${currentColor.r}, ${currentColor.g}, ${currentColor.b})`);\r\n        gradient.addColorStop(1, `rgb(${255 - currentColor.r}, ${255 - currentColor.g}, ${255 - currentColor.b})`);\r\n\r\n        // Apply blur effect to the gradient\r\n        ctx.filter = 'blur(5px)';\r\n\r\n        // Draw gradient background\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Reset filter for subsequent drawing\r\n        ctx.filter = 'none';\r\n\r\n        // Draw food items\r\n        foodItems.forEach(item => {\r\n            ctx.save();\r\n            ctx.translate(item.x, item.y);\r\n            ctx.rotate(item.rotation);\r\n            ctx.font = `${item.size}px Arial`;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n\r\n            // Add a white outline for better visibility\r\n            ctx.strokeStyle = 'white';\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeText(item.emoji, 0, 0);\r\n\r\n            // Fill with black for contrast\r\n            ctx.fillStyle = 'black';\r\n            ctx.fillText(item.emoji, 0, 0);\r\n            ctx.restore();\r\n\r\n            item.y += item.speed;\r\n            item.rotation += item.rotationSpeed;\r\n            if (item.y > canvas.height + item.size) {\r\n                item.y = -item.size;\r\n                item.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry hauntedForest animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const hauntedForest = (canvas, ctx) => {\r\n    const trees = [];\r\n    const fireflies = [];\r\n    const fog = [];\r\n\r\n    // Initialize trees\r\n    for (let i = 0; i < 20; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            height: Math.random() * 200 + 100,\r\n            width: Math.random() * 20 + 10,\r\n        });\r\n    }\r\n\r\n    // Initialize fireflies\r\n    for (let i = 0; i < 50; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random(),\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 100; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            speed: Math.random() * 0.2 + 0.1,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#0a0a0a';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        ctx.fillStyle = '#1a1a1a';\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, canvas.height);\r\n            ctx.lineTo(tree.x - tree.width / 2, canvas.height - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, canvas.height - tree.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(200, 200, 200, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n\r\n        // Draw fireflies\r\n        fireflies.forEach(firefly => {\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.opacity})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.sin(Date.now() * 0.001) * firefly.speed;\r\n            firefly.y += Math.cos(Date.now() * 0.001) * firefly.speed;\r\n            firefly.opacity = Math.sin(Date.now() * 0.01) * 0.5 + 0.5;\r\n\r\n            if (firefly.x < 0) firefly.x = canvas.width;\r\n            if (firefly.x > canvas.width) firefly.x = 0;\r\n            if (firefly.y < 0) firefly.y = canvas.height;\r\n            if (firefly.y > canvas.height) firefly.y = 0;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry ghostlyApparitions animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const ghostlyApparitions = (canvas, ctx) => {\r\n    const ghosts = [];\r\n    const numGhosts = 5;\r\n\r\n    for (let i = 0; i < numGhosts; i++) {\r\n        ghosts.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 50 + 30,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random() * 0.5,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#000033';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ghosts.forEach(ghost => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(ghost.x, ghost.y);\r\n            ctx.bezierCurveTo(\r\n                ghost.x - ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x - ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x, ghost.y + ghost.size\r\n            );\r\n            ctx.bezierCurveTo(\r\n                ghost.x + ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x + ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x, ghost.y\r\n            );\r\n\r\n            const gradient = ctx.createRadialGradient(\r\n                ghost.x, ghost.y, 0,\r\n                ghost.x, ghost.y, ghost.size\r\n            );\r\n            gradient.addColorStop(0, `rgba(255, 255, 255, ${ghost.opacity})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            ghost.y -= ghost.speed;\r\n            ghost.opacity = Math.sin(Date.now() * 0.001) * 0.2 + 0.3;\r\n\r\n            if (ghost.y + ghost.size < 0) {\r\n                ghost.y = canvas.height + ghost.size;\r\n                ghost.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry spiderwebOverlay animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const spiderwebOverlay = (canvas, ctx) => {\r\n    const webs = [];\r\n    const numWebs = 20;\r\n\r\n    for (let i = 0; i < numWebs; i++) {\r\n        webs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 100 + 50,\r\n            rotation: Math.random() * Math.PI * 2,\r\n        });\r\n    }\r\n\r\n    const drawWeb = (x, y, size, rotation) => {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation);\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (Math.PI * 2 / 8) * i;\r\n            ctx.moveTo(0, 0);\r\n            ctx.lineTo(Math.cos(angle) * size, Math.sin(angle) * size);\r\n        }\r\n\r\n        for (let r = size / 4; r < size; r += size / 4) {\r\n            ctx.moveTo(r, 0);\r\n            for (let i = 1; i < 8; i++) {\r\n                const angle = (Math.PI * 2 / 8) * i;\r\n                ctx.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\r\n            }\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        webs.forEach(web => {\r\n            drawWeb(web.x, web.y, web.size, web.rotation);\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry undeadGraveyard animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const undeadGraveyard = (canvas, ctx) => {\r\n    const graves = [];\r\n    const zombies = [];\r\n    const fog = [];\r\n\r\n    // Initialize graves\r\n    for (let i = 0; i < 15; i++) {\r\n        graves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height - Math.random() * 100 - 50,\r\n            width: Math.random() * 30 + 20,\r\n            height: Math.random() * 40 + 30\r\n        });\r\n    }\r\n\r\n    // Initialize zombies\r\n    for (let i = 0; i < 10; i++) {\r\n        zombies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            size: Math.random() * 30 + 20\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 50; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 100 + 50,\r\n            speed: Math.random() * 0.2 + 0.1\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Dark, eerie sky\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n        gradient.addColorStop(0, '#0a0a1a');\r\n        gradient.addColorStop(1, '#1a0a1a');\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Moon\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width * 0.8, canvas.height * 0.2, 40, 0, Math.PI * 2);\r\n        ctx.fillStyle = 'rgba(255, 255, 200, 0.8)';\r\n        ctx.fill();\r\n\r\n        // Draw graves\r\n        ctx.fillStyle = '#333';\r\n        graves.forEach(grave => {\r\n            ctx.fillRect(grave.x, grave.y, grave.width, grave.height);\r\n            ctx.fillStyle = '#222';\r\n            ctx.fillRect(grave.x + grave.width * 0.1, grave.y, grave.width * 0.8, grave.height * 0.1);\r\n        });\r\n\r\n        // Draw zombies\r\n        zombies.forEach(zombie => {\r\n            ctx.beginPath();\r\n            ctx.arc(zombie.x, zombie.y - zombie.size, zombie.size * 0.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(zombie.x, zombie.y - zombie.size);\r\n            ctx.lineTo(zombie.x - zombie.size * 0.5, zombie.y);\r\n            ctx.lineTo(zombie.x + zombie.size * 0.5, zombie.y);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            zombie.y -= zombie.speed;\r\n            if (zombie.y < canvas.height * 0.7) {\r\n                zombie.y = canvas.height;\r\n                zombie.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry bloodRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const bloodRain = (canvas, ctx) => {\r\n    const drops = [];\r\n    const splats = [];\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n        drops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 5 + 5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(20, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw rain\r\n        ctx.strokeStyle = '#800';\r\n        ctx.lineWidth = 1;\r\n        drops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = 0;\r\n                drop.x = Math.random() * canvas.width;\r\n\r\n                // Create a splat\r\n                splats.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    size: Math.random() * 5 + 2,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw splats\r\n        splats.forEach((splat, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splat.x, splat.y, splat.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(128, 0, 0, ${splat.opacity})`;\r\n            ctx.fill();\r\n\r\n            splat.opacity -= 0.005;\r\n            if (splat.opacity <= 0) {\r\n                splats.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry creepyCrawlies animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const creepyCrawlies = (canvas, ctx) => {\r\n    const bugs = [];\r\n    const webNodes = [];\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n        bugs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 5 + 2,\r\n            speedX: Math.random() * 2 - 1,\r\n            speedY: Math.random() * 2 - 1\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        webNodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw web\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.beginPath();\r\n        webNodes.forEach((node, index) => {\r\n            webNodes.slice(index + 1).forEach(otherNode => {\r\n                ctx.moveTo(node.x, node.y);\r\n                ctx.lineTo(otherNode.x, otherNode.y);\r\n            });\r\n        });\r\n        ctx.stroke();\r\n\r\n        // Draw and move bugs\r\n        ctx.fillStyle = '#400';\r\n        bugs.forEach(bug => {\r\n            ctx.beginPath();\r\n            ctx.arc(bug.x, bug.y, bug.size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            bug.x += bug.speedX;\r\n            bug.y += bug.speedY;\r\n\r\n            if (bug.x < 0 || bug.x > canvas.width) bug.speedX *= -1;\r\n            if (bug.y < 0 || bug.y > canvas.height) bug.speedY *= -1;\r\n\r\n            // Occasionally change direction\r\n            if (Math.random() < 0.01) {\r\n                bug.speedX = Math.random() * 2 - 1;\r\n                bug.speedY = Math.random() * 2 - 1;\r\n            }\r\n        });\r\n    };\r\n};", "/**\r\n * @fileoverview Animated Text Component for React applications\r\n * @module AnimatedText\r\n * @requires react\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n/**\r\n * @typedef {Object} AnimatedTextConfig\r\n * @property {number} [speed=100] - Animation speed in milliseconds\r\n * @property {boolean} [loop=false] - Whether to loop the animation\r\n * @property {number} [delay=0] - Delay before animation starts\r\n * @property {string} [color='currentColor'] - Text color\r\n */\r\n\r\n/**\r\n * @typedef {Object} AnimatedTextProps\r\n * @property {string} text - The text to animate\r\n * @property {('typewriter'|'fadeIn'|'bounce'|'glitch'|'rainbow')} [effect='typewriter'] - Animation effect\r\n * @property {AnimatedTextConfig} [config] - Animation configuration\r\n * @property {Object} [styles] - Custom CSS styles\r\n */\r\n\r\nclass TextErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <span>Animation failed to load.</span>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n/**\r\n * AnimatedText Component\r\n * @param {AnimatedTextProps} props - Component props\r\n * @returns {React.ReactElement} Rendered component\r\n */\r\nconst AnimatedText = ({\r\n    text = '',\r\n    effect = 'typewriter',\r\n    config = {},\r\n    styles = {}\r\n}) => {\r\n    const defaultConfig = {\r\n        speed: 100,\r\n        loop: false,\r\n        delay: 0,\r\n        color: 'currentColor',\r\n        ...config\r\n    };\r\n\r\n    const defaultStyles = {\r\n        base: {\r\n            display: 'inline-block',\r\n            fontFamily: 'inherit',\r\n            color: defaultConfig.color,\r\n        },\r\n        typewriter: {\r\n            whiteSpace: 'pre',\r\n            overflow: 'hidden',\r\n            borderRight: '0.15em solid currentColor',\r\n        },\r\n        fadeIn: {\r\n            opacity: 0,\r\n            animation: 'fadeIn 2s forwards',\r\n        },\r\n        bounce: {\r\n            display: 'inline-block',\r\n        },\r\n        glitch: {\r\n            position: 'relative',\r\n            animation: 'glitch 1s linear infinite',\r\n        },\r\n        rainbow: {\r\n            background: 'linear-gradient(to right, #6666ff, #0099ff , #00ff00, #ff3399, #6666ff)',\r\n            backgroundSize: '400%',\r\n            backgroundClip: 'text',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent',\r\n            animation: 'rainbow 8s ease infinite',\r\n        }\r\n    };\r\n\r\n    const effects = {\r\n        typewriter: (text) => {\r\n            const [displayText, setDisplayText] = useState('');\r\n            const [isAnimating, setIsAnimating] = useState(true);\r\n\r\n            useEffect(() => {\r\n                if (!text) {\r\n                    setIsAnimating(false);\r\n                    return;\r\n                }\r\n\r\n                const startAnimation = () => {\r\n                    let i = 0;\r\n                    setDisplayText('');\r\n                    setIsAnimating(true);\r\n\r\n                    const timer = setInterval(() => {\r\n                        try {\r\n                            if (i < text.length) {\r\n                                setDisplayText(prev => prev + text[i]);\r\n                                i++;\r\n                            } else {\r\n                                setIsAnimating(false);\r\n                                if (defaultConfig.loop) {\r\n                                    setTimeout(startAnimation, defaultConfig.delay);\r\n                                }\r\n                                clearInterval(timer);\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Animation error:', error);\r\n                            clearInterval(timer);\r\n                            setIsAnimating(false);\r\n                        }\r\n                    }, defaultConfig.speed);\r\n\r\n                    return timer;\r\n                };\r\n\r\n                const timer = setTimeout(startAnimation, defaultConfig.delay);\r\n                return () => clearTimeout(timer);\r\n            }, [text, defaultConfig.loop, defaultConfig.speed, defaultConfig.delay]);\r\n\r\n            return (\r\n                <span\r\n                    style={{\r\n                        ...defaultStyles.base,\r\n                        ...defaultStyles.typewriter,\r\n                        ...styles,\r\n                        borderRight: isAnimating ? '0.15em solid currentColor' : 'none'\r\n                    }}\r\n                    aria-label={text}\r\n                >\r\n                    {displayText}\r\n                </span>\r\n            );\r\n        },\r\n\r\n        fadeIn: (text) => (\r\n            <span\r\n                style={{\r\n                    ...defaultStyles.base,\r\n                    ...defaultStyles.fadeIn,\r\n                    ...styles\r\n                }}\r\n            >\r\n                {text}\r\n            </span>\r\n        ),\r\n\r\n        bounce: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...styles }}>\r\n                {text.split('').map((char, i) => (\r\n                    <span\r\n                        key={i}\r\n                        style={{\r\n                            ...defaultStyles.bounce,\r\n                            animation: `bounce 0.5s ease infinite`,\r\n                            animationDelay: `${i * 0.1}s`\r\n                        }}\r\n                    >\r\n                        {char}\r\n                    </span>\r\n                ))}\r\n            </span>\r\n        ),\r\n\r\n        glitch: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...defaultStyles.glitch, ...styles }}>\r\n                {text}\r\n                <span className=\"glitch-effect\" data-text={text}></span>\r\n            </span>\r\n        ),\r\n\r\n        rainbow: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...defaultStyles.rainbow, ...styles }}>\r\n                {text}\r\n            </span>\r\n        )\r\n    };\r\n\r\n    useEffect(() => {\r\n        const styleSheet = document.createElement('style');\r\n        styleSheet.textContent = `\r\n      @keyframes fadeIn {\r\n        to { opacity: 1; }\r\n      }\r\n      @keyframes bounce {\r\n        0%, 100% { transform: translateY(0); }\r\n        50% { transform: translateY(-10px); }\r\n      }\r\n      @keyframes glitch {\r\n        2%, 64% { transform: translate(2px,0) skew(0deg); }\r\n        4%, 60% { transform: translate(-2px,0) skew(0deg); }\r\n        62% { transform: translate(0,0) skew(5deg); }\r\n      }\r\n      @keyframes rainbow { \r\n        0% { background-position: 0% 50%; }\r\n        50% { background-position: 100% 50%; }\r\n        100% { background-position: 0% 50%; }\r\n      }\r\n    `;\r\n        document.head.appendChild(styleSheet);\r\n        return () => document.head.removeChild(styleSheet);\r\n    }, []);\r\n\r\n    const safeText = typeof text === 'string' ? text : String(text || '');\r\n    const safeEffect = effects.hasOwnProperty(effect) ? effect : 'typewriter';\r\n\r\n    return (\r\n        <TextErrorBoundary>\r\n            {effects[safeEffect](safeText)}\r\n        </TextErrorBoundary>\r\n    );\r\n};\r\n\r\nexport default AnimatedText;", "import React, { useRef, useEffect, useCallback } from 'react';\r\nimport {\r\n    starryNight, floatingBubbles,\r\n    gradientWave, particleNetwork, galaxySpiral,\r\n    rainbowWaves, geometricShapes, fireflies,\r\n    matrixRain, quantumField, electricStorm,\r\n    cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n    neuralNetwork,\r\n    dnaHelix, snowFall, realisticRain, autumnLeaves, realisticClouds, fireflyForest, fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n} from './backgroundAnimations';\r\nimport AnimatedText from './AnimatedText';\r\n\r\n/**\r\n * @module AnimatedBackground\r\n * @description A React component that creates animated canvas backgrounds with blend modes\r\n */\r\n\r\n/**\r\n * AnimatedBackground Component\r\n * @param {Object} props - Component props\r\n * @param {string} props.animationName - Name of the animation to display\r\n * @param {string} [props.fallbackAnimation='geometricShapes'] - Fallback animation if main animation fails\r\n * @param {number} [props.fps=60] - Frames per second for the animation\r\n * @param {string} [props.blendMode='normal'] - Canvas blend mode\r\n * @param {Object} [props.style] - Additional CSS styles for the canvas\r\n * @returns {React.Component} A canvas element with the animated background\r\n */\r\nconst AnimatedBackground = ({\r\n    animationName,\r\n    fallbackAnimation = 'geometricShapes',\r\n    fps = 60,\r\n    blendMode = 'normal',\r\n    style\r\n}) => {\r\n    const canvasRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n    const blendModes = [\r\n        'normal',\r\n        'multiply',\r\n        'screen',\r\n        'overlay',\r\n        'darken',\r\n        'lighten',\r\n        'color-dodge',\r\n        'color-burn',\r\n        'hard-light',\r\n        'soft-light',\r\n        'difference',\r\n        'exclusion',\r\n        'hue',\r\n        'saturation',\r\n        'color',\r\n        'luminosity'\r\n    ];\r\n\r\n    const setupCanvas = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        // Set blend mode\r\n        ctx.globalCompositeOperation = blendModes.includes(blendMode)\r\n            ? blendMode\r\n            : 'normal';\r\n\r\n        const animations = {\r\n            starryNight, floatingBubbles, gradientWave, particleNetwork, galaxySpiral,\r\n            rainbowWaves, geometricShapes, fireflies, matrixRain, quantumField,\r\n            electricStorm, cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n            neuralNetwork, dnaHelix, snowFall, realisticRain, realisticClouds,\r\n            fireflyForest, autumnLeaves, fallingFoodFiesta, hauntedForest,\r\n            ghostlyApparitions,\r\n            spiderwebOverlay,\r\n            undeadGraveyard,\r\n            bloodRain,\r\n            creepyCrawlies,\r\n        };\r\n\r\n        let animation = animations[animationName];\r\n\r\n        if (!animation) {\r\n            console.warn(`Animation \"${animationName}\" not found. Using fallback animation.`);\r\n            animation = animations[fallbackAnimation] || animations.geometricShapes;\r\n        }\r\n\r\n        return animation(canvas, ctx);\r\n    }, [animationName, fallbackAnimation, blendMode]);\r\n\r\n    useEffect(() => {\r\n        const animate = () => {\r\n            const animation = setupCanvas();\r\n            let lastTime = 0;\r\n            const frameInterval = 1000 / fps;\r\n\r\n            const loop = (currentTime) => {\r\n                animationRef.current = requestAnimationFrame(loop);\r\n\r\n                const deltaTime = currentTime - lastTime;\r\n                if (deltaTime >= frameInterval) {\r\n                    lastTime = currentTime - (deltaTime % frameInterval);\r\n                    animation();\r\n                }\r\n            };\r\n\r\n            animationRef.current = requestAnimationFrame(loop);\r\n        };\r\n\r\n        animate();\r\n\r\n        const handleResize = () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n                setupCanvas();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            if (animationRef.current) {\r\n                cancelAnimationFrame(animationRef.current);\r\n            }\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [fps, setupCanvas]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                zIndex: -1,\r\n                ...style\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport {\r\n    AnimatedBackground,\r\n    starryNight,\r\n    floatingBubbles,\r\n    gradientWave,\r\n    particleNetwork,\r\n    galaxySpiral,\r\n    rainbowWaves,\r\n    geometricShapes,\r\n    fireflies,\r\n    matrixRain,\r\n    quantumField,\r\n    electricStorm,\r\n    cosmicDust,\r\n    neonPulse,\r\n    auroraBorealis,\r\n    fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n    AnimatedText,\r\n\r\n\r\n\r\n};"],
  "mappings": "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",
  "names": ["starryNight", "canvas", "ctx", "stars", "i", "push", "x", "Math", "random", "width", "y", "height", "radius", "vx", "floor", "vy", "twinkle", "color", "concat", "fillStyle", "fillRect", "forEach", "star", "opacity", "abs", "sin", "gradient", "createRadialGradient", "addColorStop", "beginPath", "arc", "PI", "fill", "floatingBubbles", "bubbles", "speed", "glowColor", "bubble", "gradientWave", "time", "createLinearGradient", "moveTo", "lineTo", "strokeStyle", "lineWidth", "stroke", "particleNetwork", "particles", "particle", "length", "j", "dx", "dy", "distance", "sqrt", "galaxySpiral", "arguments", "starCount", "angle", "cos", "rotation", "save", "translate", "rotate", "restore", "rainbowWaves", "colors", "auroraBorealis", "colorStops", "pos", "_loop", "stop", "closePath", "neonPulse", "circles", "phase", "circle", "glow", "cosmicDust", "size", "speedX", "speedY", "electricStorm", "bolts", "points", "life", "createBolt", "bolt", "index", "splice", "quantumField", "hue", "otherParticle", "geometricShapes", "shapes", "type", "clearRect", "shape", "fireflies", "brightness", "firefly", "max", "min", "matrixRain", "columns", "drops", "characters", "font", "text", "fillText", "dnaHelix", "t", "r", "neuralNetwork", "nodes", "connections", "backgroundGradient", "node", "_ref", "_ref2", "_slicedToArray", "oceanWaves", "skyGradient", "sun", "clouds", "sunGradient", "cloud", "snowFall", "snowflakes", "moon", "mountains", "moonGradient", "mountain", "point", "flake", "fireflyForest", "trees", "angleSpeed", "glowIntensity", "tree", "fly", "Date", "now", "realisticClouds", "gradientHeight", "createCloud", "particleCount", "createSkyGradient", "sunRadius", "autumnLeaves", "loadedCount", "leaves", "leafColors", "leafImages", "leafImagesLoaded", "imagesLoaded", "src", "img", "Image", "onload", "onerror", "amplitude", "imageIndex", "leaf", "drawImage", "ellipse", "realisticRain", "raindrops", "splashes", "drop", "splash", "fallingFoodFiesta", "foodItems", "foodTypes", "g", "b", "colorIndex", "nextColorIndex", "colorT", "emoji", "rotationSpeed", "color1", "color2", "currentColor", "round", "filter", "item", "textAlign", "textBaseline", "strokeText", "hauntedForest", "fog", "ghostlyApparitions", "ghosts", "ghost", "bezierCurveTo", "spiderwebOverlay", "webs", "web", "undeadGraveyard", "graves", "zombies", "grave", "zombie", "bloodRain", "splats", "splat", "creepyCrawlies", "bugs", "webNodes", "slice", "otherNode", "bug", "TextErrorBoundary", "_React$Component", "_this", "_classCallCheck", "_len", "args", "Array", "_key", "_defineProperty", "_callSuper", "this", "hasError", "e", "React", "Component", "key", "value", "error", "state", "createElement", "props", "children", "n", "AnimatedText", "_ref$text", "_ref$effect", "effect", "_ref$config", "config", "_ref$styles", "styles", "defaultConfig", "_objectSpread", "loop", "delay", "defaultStyles", "base", "display", "fontFamily", "typewriter", "whiteSpace", "overflow", "borderRight", "fadeIn", "animation", "bounce", "glitch", "position", "rainbow", "background", "backgroundSize", "backgroundClip", "WebkitBackgroundClip", "WebkitTextFillColor", "effects", "_useState2", "useState", "displayText", "setDisplayText", "_useState4", "isAnimating", "setIsAnimating", "useEffect", "timer", "setTimeout", "startAnimation", "setInterval", "prev", "clearInterval", "console", "clearTimeout", "style", "split", "map", "char", "animationDelay", "className", "styleSheet", "document", "textContent", "head", "appendChild", "removeChild", "safeText", "String", "safeEffect", "hasOwnProperty", "AnimatedBackground", "animationName", "_ref$fallbackAnimatio", "fallbackAnimation", "_ref$fps", "fps", "_ref$blendMode", "blendMode", "canvasRef", "useRef", "animationRef", "blendModes", "setupCanvas", "useCallback", "current", "getContext", "window", "innerWidth", "innerHeight", "globalCompositeOperation", "includes", "animations", "warn", "lastTime", "frameInterval", "requestAnimationFrame", "currentTime", "deltaTime", "handleResize", "addEventListener", "cancelAnimationFrame", "removeEventListener", "ref", "top", "left", "zIndex"]
}
